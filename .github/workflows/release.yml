name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
        - auto

permissions:
  contents: write
  packages: write
  id-token: write

env:
  WORKFLOW_ID: ${{ github.run_id }}
  ARTIFACT_PACKAGE: release-package-json-${{ github.run_id }}
  ARTIFACT_BUILD: release-build-output-${{ github.run_id }}

jobs:
  # Security check: Only allow release on main repository
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check repository ownership
        run: |
          if [ "${{ github.repository }}" != "helpers4/helpers4" ]; then
            echo "::error::Release workflow can only be executed on the main repository helpers4/helpers4"
            echo "Current repository: ${{ github.repository }}"
            exit 1
          fi
          echo "‚úÖ Repository ownership verified: ${{ github.repository }}"

  # Version calculation and update job
  version-update:
    runs-on: ubuntu-latest
    needs: security-check
    
    outputs:
      current-version: ${{ steps.version.outputs.current-version }}
      new-version: ${{ steps.version.outputs.new-version }}
      version-changed: ${{ steps.version.outputs.version-changed }}
    
    steps:
      - name: Setup release environment
        uses: ./.github/actions/release-setup
        with:
          app-id: ${{ vars.PUSHINATOR_ID }}
          private-key: ${{ secrets.PUSHINATOR_KEY }}
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '20'

      - name: Calculate and update version
        id: version
        uses: ./.github/actions/version-manager
        with:
          version-type: ${{ inputs.version_type }}

      - name: Upload updated package.json
        if: steps.version.outputs.version-changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}
          path: package.json
          retention-days: 1

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Update version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Update the version
          if [[ "${{ inputs.version_type }}" == "auto" ]]; then
            echo "ü§ñ Auto-calculating version from git commits..."
            bun scripts/version/version-manager.ts --auto
          else
            bun scripts/version/version-manager.ts ${{ inputs.version_type }}
          fi
          
          # Get the new version from package.json after update
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Upload updated package.json
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}
          path: package.json
          retention-days: 1

  # Build and test job (depends on version update)
  build-and-test:
    runs-on: ubuntu-latest
    needs: [security-check, version-update]
    if: needs.version-update.outputs.version-changed == 'true'
    
    steps:
      - name: Setup release environment
        uses: ./.github/actions/release-setup
        with:
          app-id: ${{ vars.PUSHINATOR_ID }}
          private-key: ${{ secrets.PUSHINATOR_KEY }}

      - name: Download updated package.json
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '20'

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          test-type: 'test'

      - name: Build packages
        uses: ./.github/actions/run-tests
        with:
          test-type: 'build'

      - name: Run coherency tests
        uses: ./.github/actions/run-tests
        with:
          test-type: 'coherency'

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_BUILD }}
          path: |
            build/
            dist/
          retention-days: 1

  # Release job (depends on build and test)
  release:
    runs-on: ubuntu-latest
    needs: [security-check, version-update, build-and-test]
    if: needs.version-update.outputs.version-changed == 'true'
    
    steps:
      - name: Setup release environment
        id: setup
        uses: ./.github/actions/release-setup
        with:
          app-id: ${{ vars.PUSHINATOR_ID }}
          private-key: ${{ secrets.PUSHINATOR_KEY }}
          fetch-depth: 0

      - name: Download artifacts
        uses: ./.github/actions/checkout-and-download
        with:
          download-package: 'true'
          download-build: 'true'
          artifact-package-name: ${{ env.ARTIFACT_PACKAGE }}
          artifact-build-name: ${{ env.ARTIFACT_BUILD }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '20'

      - name: Publish release
        uses: ./.github/actions/publish-release
        with:
          github-token: ${{ steps.setup.outputs.token }}
          npm-token: ${{ secrets.NPM_TOKEN }}
          new-version: ${{ needs.version-update.outputs.new-version }}

      - name: Trigger Documentation Update
        id: trigger_docs
        continue-on-error: true
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ steps.setup.outputs.token }}
          repository: helpers4/doc
          event-type: new-release
          client-payload: '{"version": "${{ needs.version-update.outputs.new-version }}"}'

      - name: Documentation trigger status
        run: |
          if [ "${{ steps.trigger_docs.outcome }}" = "success" ]; then
            echo "‚úÖ Documentation update triggered successfully"
          else
            echo "‚ö†Ô∏è  WARNING: Documentation update trigger failed"
            echo "üìÑ Please manually trigger documentation update for helpers4/doc"
          fi
          echo "üì¶ Version: ${{ needs.version-update.outputs.new-version }}"
