name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  pull_request_target:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write
  issues: write

env:
  WORKFLOW_ID: ${{ github.run_id }}
  ARTIFACT_PACKAGE: package-json-${{ github.run_id }}
  ARTIFACT_BUILD: build-output-${{ github.run_id }}

jobs:
  # Security check for external contributors
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Check if PR is from external contributor
        run: |
          echo "::warning::This PR is from an external contributor. Manual review required before running CI."
          echo "::error::External PR detected. Workflow stopped for security."
          exit 1

  # Version calculation with artifact upload
  version-calculation:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-changed: ${{ steps.version.outputs.changed }}
      status: ${{ steps.version.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - name: Calculate version and upload artifact
        id: version
        uses: ./.github/actions/version-manager
        with:
          artifact-name: ${{ env.ARTIFACT_PACKAGE }}

  # Build project with artifact upload
  build:
    runs-on: ubuntu-latest
    needs: version-calculation
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      build-success: ${{ steps.build.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Build project and upload artifact
        id: build
        uses: ./.github/actions/build-project
        with:
          artifact-name: ${{ env.ARTIFACT_BUILD }}

  # Test job (runs in parallel with build)
  test:
    runs-on: ubuntu-latest
    needs: version-calculation
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      test-status: ${{ steps.test.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Run tests
        id: test
        uses: ./.github/actions/run-tests
        with:
          test-type: test

  # Simple validation jobs
  security:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      security-status: ${{ steps.security.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        id: security
        run: |
          echo "Running security audit..."
          bun audit || true
          echo "status=success" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      lint-status: ${{ steps.lint.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        id: lint
        run: |
          echo "Running linting..."
          bun run lint
          echo "status=success" >> $GITHUB_OUTPUT

  type-check:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      typecheck-status: ${{ steps.typecheck.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run TypeScript check
        id: typecheck
        run: |
          echo "Running TypeScript check..."
          bun run typecheck
          echo "status=success" >> $GITHUB_OUTPUT

  # Verification job (depends on build for artifacts)
  verification:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)
    
    outputs:
      coherency-status: ${{ steps.coherency.outputs.status }}
      bundle-size-status: ${{ steps.bundle.outputs.status }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PACKAGE }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_BUILD }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run coherency tests
        id: coherency
        run: |
          echo "Running coherency tests..."
          bun run test:coherency
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Analyze bundle size
        id: bundle
        run: |
          echo "Analyzing bundle size..."
          
          if [ -d "build" ] || [ -d "dist" ]; then
            TOTAL_SIZE=$(du -sh build/ dist/ 2>/dev/null | awk '{print $1}' | head -1 || echo "0")
            echo "Bundle size: ${TOTAL_SIZE}"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No build output found for size analysis"
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # PR comment with results
  pr-comment:
    runs-on: ubuntu-latest
    needs: [version-calculation, build, test, security, lint, type-check, verification]
    if: |
      always() && 
      (github.event_name == 'pull_request' || 
       (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository))
    
    steps:
      - name: Update PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const createSummaryTable = (jobs) => {
              const rows = Object.entries(jobs).map(([job, status]) => {
                const icon = status === 'success' ? '‚úÖ' : 
                           status === 'failure' ? '‚ùå' : 
                           status === 'skipped' ? '‚è≠Ô∏è' : '‚ö†Ô∏è';
                return `| ${job} | ${icon} ${status} |`;
              }).join('\n');
              
              return `## üîç PR Validation Summary\n\n| Job | Status |\n|-----|--------|\n${rows}`;
            };
            
            const jobs = {
              'Version Calculation': '${{ needs.version-calculation.outputs.status || 'unknown' }}',
              'Build': '${{ needs.build.outputs.build-success || 'unknown' }}',
              'Test': '${{ needs.test.outputs.test-status || 'unknown' }}',
              'Security Audit': '${{ needs.security.outputs.security-status || 'unknown' }}',
              'Lint': '${{ needs.lint.outputs.lint-status || 'unknown' }}',
              'Type Check': '${{ needs.type-check.outputs.typecheck-status || 'unknown' }}',
              'Coherency Tests': '${{ needs.verification.outputs.coherency-status || 'unknown' }}',
              'Bundle Size': '${{ needs.verification.outputs.bundle-size-status || 'unknown' }}'
            };
            
            const comment = createSummaryTable(jobs);
            
            try {
              // Find existing comment or create new one
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && comment.body.includes('PR Validation Summary')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: comment
                });
                console.log('Updated existing comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
                console.log('Created new comment');
              }
            } catch (error) {
              console.error('Error updating PR comment:', error);
              // Don't fail the workflow if comment update fails
              console.log('Comment update failed, but continuing workflow...');
            }
