name: "Publish Release"
description: "Commit version, create tag, publish to NPM and create GitHub release"

inputs:
  github-token:
    description: "GitHub token for commits and releases"
    required: true

  npm-token:
    description: "NPM token for publishing"
    required: true

  new-version:
    description: "New version to publish"
    required: true

  dry-run:
    description: "Dry run mode (skip actual publishing)"
    required: false
    default: "false"

outputs:
  published:
    description: "Whether the release was published"
    value: ${{ steps.publish.outputs.published }}

runs:
  using: "composite"
  steps:
    - name: Commit version changes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add package.json
        git commit -m "chore(release): bump version to ${{ inputs.new-version }}"

        echo "Committed version bump"

    - name: Create and push tag
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        git tag -a "v${{ inputs.new-version }}" -m "Release v${{ inputs.new-version }}"
        git push origin main --tags

        echo "Created and pushed tag v${{ inputs.new-version }}"

    - name: Setup NPM authentication
      shell: bash
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ inputs.npm-token }}" > ~/.npmrc
        echo "NPM authentication configured"

    - name: Publish to NPM
      id: publish
      shell: bash
      run: |
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "üîç DRY RUN: Would publish version ${{ inputs.new-version }} to NPM"
          bun run build
          npm pack --dry-run
          echo "published=false" >> $GITHUB_OUTPUT
        else
          echo "üì¶ Publishing version ${{ inputs.new-version }} to NPM..."
          bun run build
          
          # Check if this is a prerelease
          if echo "${{ inputs.new-version }}" | grep -q "beta\|alpha\|rc"; then
            npm publish --tag beta
          else
            npm publish
          fi
          
          echo "‚úÖ Successfully published to NPM"
          echo "published=true" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Generate release notes from commits
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)")
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -10)
        fi

        # Determine if this is a prerelease
        if echo "${{ inputs.new-version }}" | grep -q "beta\|alpha\|rc"; then
          PRERELEASE="--prerelease"
        else
          PRERELEASE=""
        fi

        # Create release
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "üîç DRY RUN: Would create GitHub release v${{ inputs.new-version }}"
        else
          gh release create "v${{ inputs.new-version }}" \
            --title "Release v${{ inputs.new-version }}" \
            --notes "## What's Changed

        $COMMITS

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ inputs.new-version }}" \
            $PRERELEASE
          
          echo "‚úÖ Created GitHub release v${{ inputs.new-version }}"
        fi
